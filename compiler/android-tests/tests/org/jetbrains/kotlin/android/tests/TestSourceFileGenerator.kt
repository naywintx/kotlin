/*
 * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.android.tests

import com.intellij.openapi.util.io.FileUtil
import com.intellij.openapi.util.text.StringUtil
import org.jetbrains.kotlin.generators.util.TestGeneratorUtil.getMainClassName
import org.jetbrains.kotlin.name.FqName
import org.jetbrains.kotlin.name.NameUtils
import org.jetbrains.kotlin.utils.Printer
import java.io.File

class TestInfo(val name: String, val fqName: FqName, val file: File)

class TestSourceFileGenerator(
    private val flavorFolder: File,
    private val flavorName: String,
    private val generatedTestNames: MutableSet<String>
) {
    private val infos = arrayListOf<TestInfo>()

    fun addTests(info: Collection<TestInfo>) {
        infos.addAll(info)
    }

    fun generate() {
        val f = flavorFolder.resolve(flavorName.replaceFirstChar(Char::uppercaseChar) + ".java")
        f.parentFile.mkdirs()
        f.writer().use { suite ->
            val p = Printer(suite)
            p.println(
                """package ${CodegenTestsOnAndroidGenerator.TEST_CLASS_PACKAGE};
                |
                |import ${CodegenTestsOnAndroidGenerator.BASE_TEST_CLASS_PACKAGE}.${CodegenTestsOnAndroidGenerator.BASE_TEST_CLASS_NAME};
                |
                |/* This class is generated by ${getMainClassName()}. DO NOT MODIFY MANUALLY */
                |public class ${flavorName.replaceFirstChar(Char::uppercaseChar)} extends ${CodegenTestsOnAndroidGenerator.BASE_TEST_CLASS_NAME} {
                |
            """.trimMargin()
            )
            p.pushIndent()

            for (info in infos) {
                generateTestMethod(
                    p,
                    inventTestName(info.file.name),
                    info.fqName.asString(),
                    StringUtil.escapeStringCharacters(info.file.path)
                )
            }

            p.popIndent()
            p.println("}")
        }
    }

    private fun inventTestName(fileName: String): String {
        val baseName = NameUtils.sanitizeAsJavaIdentifier(FileUtil.getNameWithoutExtension(StringUtil.capitalize(fileName)))
        var result = baseName
        var i = 0

        while (result in generatedTestNames) {
            result = "${baseName}_${i}"
            i++
        }

        generatedTestNames.add(result)
        return result
    }

    private fun generateTestMethod(p: Printer, testName: String, className: String, filePath: String) {
        p.println("public void test$testName() {")
        p.pushIndent()
        p.println("invokeBoxMethod($className.class, \"$filePath\", \"OK\");")
        p.popIndent()
        p.println("}")
        p.println()
    }

}